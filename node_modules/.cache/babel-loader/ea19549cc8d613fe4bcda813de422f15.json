{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawleksa/Documents/code/Mentoring/Users_api/src/screens/People.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport List from '../components/List/List';\nimport { getPeople, resetPeople } from '../store/people/actions';\nimport { selectIsLoadingPeople, selectIsRejectedPeople, selectIsResetPeople, selectPeople } from '../store/people/selectors';\nimport './Screens.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst People = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const people = useSelector(selectPeople);\n  const isLoading = useSelector(selectIsLoadingPeople);\n  const rejected = useSelector(selectIsRejectedPeople);\n  const reset = useSelector(selectIsResetPeople);\n  useEffect(() => {\n    dispatch(getPeople());\n  }, [dispatch]);\n\n  const handleReset = () => {\n    dispatch(resetPeople());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 27\n    }, this), rejected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"unable to fetch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 26\n    }, this), !reset && !isLoading && !rejected && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset people\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      elements: people\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(People, \"vR6RBYtJaWimtA3AlaovEkQsCvA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = People;\nexport default People;\n\nvar _c;\n\n$RefreshReg$(_c, \"People\");","map":{"version":3,"sources":["/Users/przemyslawleksa/Documents/code/Mentoring/Users_api/src/screens/People.tsx"],"names":["React","useEffect","useDispatch","useSelector","List","getPeople","resetPeople","selectIsLoadingPeople","selectIsRejectedPeople","selectIsResetPeople","selectPeople","People","dispatch","people","isLoading","rejected","reset","handleReset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,yBAAvC;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,EAAwDC,mBAAxD,EAA6EC,YAA7E,QAAiG,2BAAjG;AACA,OAAO,eAAP;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGV,WAAW,CAACO,YAAD,CAA1B;AACA,QAAMI,SAAS,GAAGX,WAAW,CAACI,qBAAD,CAA7B;AACA,QAAMQ,QAAQ,GAAGZ,WAAW,CAACK,sBAAD,CAA5B;AACA,QAAMQ,KAAK,GAAGb,WAAW,CAACM,mBAAD,CAAzB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,QAAQ,CAACP,SAAS,EAAV,CAAR;AACH,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;;AAIA,QAAMK,WAAW,GAAG,MAAM;AACtBL,IAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,eACKQ,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADlB,EAEKC,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFjB,EAGK,CAACC,KAAD,IAAU,CAACF,SAAX,IAAwB,CAACC,QAAzB,iBAAqC;AAAQ,MAAA,OAAO,EAAEE,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAH1C,eAII,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEJ;AAAhB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvBD;;GAAMF,M;UACeT,W,EACFC,W,EACGA,W,EACDA,W,EACHA,W;;;KALZQ,M;AAyBN,eAAeA,MAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport List from '../components/List/List'\nimport { getPeople, resetPeople } from '../store/people/actions'\nimport { selectIsLoadingPeople, selectIsRejectedPeople, selectIsResetPeople, selectPeople } from '../store/people/selectors'\nimport './Screens.css'\n\nconst People = () => {\n    const dispatch = useDispatch()\n    const people = useSelector(selectPeople)\n    const isLoading = useSelector(selectIsLoadingPeople)\n    const rejected = useSelector(selectIsRejectedPeople)\n    const reset = useSelector(selectIsResetPeople)\n\n    useEffect(() => {\n        dispatch(getPeople())\n    }, [dispatch])\n\n    const handleReset = () => {\n        dispatch(resetPeople())\n    }\n\n    return (\n        <div>\n            {isLoading && <p>Loading...</p>}\n            {rejected && <p>unable to fetch</p>}\n            {!reset && !isLoading && !rejected && <button onClick={handleReset}>Reset people</button>} \n            <List elements={people}/>\n        </div>\n    )\n}\n\nexport default People"]},"metadata":{},"sourceType":"module"}